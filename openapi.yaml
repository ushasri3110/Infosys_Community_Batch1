openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8081
    description: Generated server url
  - url: http://localhost:8082
    description: Generated server url
  - url: http://localhost:8083
    description: Generated server url
  - url: http://localhost:8084
    description: Generated server url
  - url: http://localhost:8085
    description: Generated server url
paths:
  /auth/signup:
    post:
      tags:
        - user-controller
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/login:
    post:
      tags:
        - user-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/get-user:
    get:
      tags:
        - user-controller
      operationId: getUser
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/get-email:
    get:
      tags:
        - user-controller
      operationId: getEmailFromJWT
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/society-register:
    post:
      tags:
        - society-controller
      operationId: residentRegistration
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/resident-register:
    post:
      tags:
        - resident-controller
      operationId: residentRegistration_1
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResidentDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/addFlat:
    post:
      tags:
        - flat-controller
      operationId: addFlat
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlatDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Flat'
  /api/societies:
    get:
      tags:
        - society-controller
      operationId: getAllSocieties
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Society'
  /api/residents:
    get:
      tags:
        - resident-controller
      operationId: getResidents
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resident'
  /api/getResidentProfile:
    get:
      tags:
        - resident-controller
      operationId: getResidentProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resident'
  /api/getResidentByJWT:
    get:
      tags:
        - resident-controller
      operationId: getResidentByJWT
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resident'
  /api/getAllFlats:
    get:
      tags:
        - flat-controller
      operationId: getAllFlats
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flat'
  /api/get-admin:
    get:
      tags:
        - society-controller
      operationId: getAdminDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Society'
  /api/flatByFlatNo:
    get:
      tags:
        - flat-controller
      operationId: getFlatByFlatNoAndSocietyId
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: flatNo
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Flat'
  /api/updateVendor/{vendorId}:
    put:
      tags:
        - vendor-controller
      operationId: updateVendor
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vendor'
  /api/closeComplaint/{id}:
    put:
      tags:
        - complaint-controller
      operationId: closeComplaint
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Complaint'
  /api/sendRequest:
    post:
      tags:
        - request-controller
      operationId: sendRequest
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/addVendor:
    post:
      tags:
        - vendor-controller
      operationId: addVendor
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vendor'
  /api/addComplaint:
    post:
      tags:
        - complaint-controller
      operationId: addComplaint
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplaintDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Complaint'
  /api/getAllVendors:
    get:
      tags:
        - vendor-controller
      operationId: getAllVendors
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
  /api/getAllComplaints:
    get:
      tags:
        - complaint-controller
      operationId: getAllComplaints
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'
  /api/deleteVendor/{vendorId}:
    delete:
      tags:
        - vendor-controller
      operationId: deleteVendor
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: vendorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/updatePost/{postId}:
    put:
      tags:
        - post-controller
      operationId: updatePost
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponse'
  /api/updateNotice/{noticeId}:
    put:
      tags:
        - notice-controller
      operationId: updateNotice
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: noticeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoticeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoticeResponse'
  /api/updateEvent/{eventId}:
    put:
      tags:
        - event-controller
      operationId: updateEvent
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponse'
  /api/updateContact/{emergencyId}:
    put:
      tags:
        - emergency-contact-controller
      operationId: updateContact
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: emergencyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyContactDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmergencyContactResponse'
  /api/removeLike/{postId}:
    put:
      tags:
        - post-controller
      operationId: removeLike
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Post'
  /api/likePost/{postId}:
    put:
      tags:
        - post-controller
      operationId: likePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Post'
  /api/addPost:
    post:
      tags:
        - post-controller
      operationId: addPost
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponse'
  /api/addParking:
    post:
      tags:
        - parking-controller
      operationId: addParking
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Parking'
  /api/addNotice:
    post:
      tags:
        - notice-controller
      operationId: addNotice
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoticeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoticeResponse'
  /api/addFeedback/{eventId}:
    post:
      tags:
        - feedback-controller
      operationId: addFeedback
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FeedbackResponse'
  /api/addEvent:
    post:
      tags:
        - event-controller
      operationId: addEvent
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponse'
  /api/addContact:
    post:
      tags:
        - emergency-contact-controller
      operationId: addContact
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyContactDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmergencyContactResponse'
  /api/getNoticeById/{noticeId}:
    get:
      tags:
        - notice-controller
      operationId: getNoticeByNoticeId
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: noticeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notice'
  /api/getFeedback/{eventId}:
    get:
      tags:
        - feedback-controller
      operationId: getFeedbackByEventId
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
  /api/getEventById/{eventId}:
    get:
      tags:
        - event-controller
      operationId: getEventByEventId
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Event'
  /api/getAllPosts:
    get:
      tags:
        - post-controller
      operationId: getAllPosts
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /api/getAllParking:
    get:
      tags:
        - parking-controller
      operationId: getAllParking
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parking'
  /api/getAllNotices:
    get:
      tags:
        - notice-controller
      operationId: getAllNotices
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notice'
  /api/getAllEvents:
    get:
      tags:
        - event-controller
      operationId: getAllEvents
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /api/getAllContacts:
    get:
      tags:
        - emergency-contact-controller
      operationId: getAllContacts
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmergencyContact'
  /api/deletePost/{postId}:
    delete:
      tags:
        - post-controller
      operationId: deletePost
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponse'
  /api/deleteNotice/{noticeId}:
    delete:
      tags:
        - notice-controller
      operationId: deleteNotice
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: noticeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoticeResponse'
  /api/deleteEvent/{eventId}:
    delete:
      tags:
        - event-controller
      operationId: deleteEvent
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponse'
  /api/deleteContact/{emergencyId}:
    delete:
      tags:
        - emergency-contact-controller
      operationId: deleteContact
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: emergencyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmergencyContactResponse'
  /api/paymentCallback:
    post:
      tags:
        - payment-controller
      operationId: paymentCallback
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/createPayment:
    post:
      tags:
        - payment-controller
      operationId: createPayment
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Payment'
  /api/getAllPayments:
    get:
      tags:
        - payment-controller
      operationId: getAllPayments
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        role:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        message:
          type: string
    LoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AdminDto:
      type: object
      properties:
        name:
          type: string
        phoneNo:
          type: string
        postal:
          type: string
        societyName:
          type: string
        societyAddress:
          type: string
        city:
          type: string
        district:
          type: string
    ResidentDto:
      type: object
      properties:
        name:
          type: string
        phoneNo:
          type: string
        postal:
          type: string
        societyName:
          type: string
        flatNo:
          type: string
    FlatDto:
      type: object
      properties:
        flatNo:
          type: string
    Flat:
      type: object
      properties:
        flatId:
          type: integer
          format: int64
        flatNo:
          type: string
        occupied:
          type: boolean
        societyId:
          type: integer
          format: int64
    Society:
      type: object
      properties:
        societyId:
          type: integer
          format: int64
        name:
          type: string
        phoneNo:
          type: string
        societyName:
          type: string
        societyAddress:
          type: string
        city:
          type: string
        district:
          type: string
        postal:
          type: string
        email:
          type: string
    Resident:
      type: object
      properties:
        residentId:
          type: integer
          format: int64
        name:
          type: string
        phoneNo:
          type: string
        flatNo:
          type: string
        postal:
          type: string
        email:
          type: string
        flatId:
          type: integer
          format: int64
        societyId:
          type: integer
          format: int64
        role:
          type: string
    VendorDto:
      type: object
      properties:
        name:
          type: string
        service:
          type: string
        company:
          type: string
        phoneNo:
          type: string
        email:
          type: string
    Vendor:
      type: object
      properties:
        vendorId:
          type: integer
          format: int64
        name:
          type: string
        company:
          type: string
        email:
          type: string
        service:
          type: string
        phoneNo:
          type: string
        societyId:
          type: integer
          format: int64
    Complaint:
      type: object
      properties:
        complaintId:
          type: integer
          format: int64
        residentId:
          type: integer
          format: int64
        flatNo:
          type: string
        personName:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        societyId:
          type: integer
          format: int64
    RequestDto:
      type: object
      properties:
        address:
          type: string
        description:
          type: string
        vendorId:
          type: integer
          format: int64
        phoneNo:
          type: string
    ComplaintDto:
      type: object
      properties:
        personName:
          type: string
        title:
          type: string
        description:
          type: string
    PostDto:
      type: object
      properties:
        content:
          type: string
        title:
          type: string
        postImage:
          type: string
    Post:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        content:
          type: string
        title:
          type: string
        likeCount:
          type: integer
          format: int64
        postImage:
          type: string
        societyId:
          type: integer
          format: int64
    PostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
        message:
          type: string
    NoticeDto:
      type: object
      properties:
        heading:
          type: string
        content:
          type: string
        datePosted:
          type: string
          format: date-time
        noticeImage:
          type: string
    Notice:
      type: object
      properties:
        noticeId:
          type: integer
          format: int64
        heading:
          type: string
        content:
          type: string
        datePosted:
          type: string
          format: date-time
        noticeImage:
          type: string
        societyId:
          type: integer
          format: int64
    NoticeResponse:
      type: object
      properties:
        notice:
          $ref: '#/components/schemas/Notice'
        message:
          type: string
    EventDto:
      type: object
      properties:
        eventName:
          type: string
        eventDate:
          type: string
          format: date-time
        eventDetails:
          type: string
        eventImage:
          type: string
    Event:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        eventName:
          type: string
        eventDate:
          type: string
          format: date-time
        eventDetails:
          type: string
        eventImage:
          type: string
        societyId:
          type: integer
          format: int64
    EventResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
        message:
          type: string
    EmergencyContactDto:
      type: object
      properties:
        personName:
          type: string
        serviceType:
          type: string
        phoneNo:
          type: string
        block:
          type: string
    EmergencyContact:
      type: object
      properties:
        emergencyId:
          type: integer
          format: int64
        personName:
          type: string
        serviceType:
          type: string
        phoneNo:
          type: string
        block:
          type: string
        societyId:
          type: integer
          format: int64
    EmergencyContactResponse:
      type: object
      properties:
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
        message:
          type: string
    ParkingDto:
      type: object
      properties:
        flatNo:
          type: string
        parkingNo:
          type: string
    Parking:
      type: object
      properties:
        parkingId:
          type: integer
          format: int64
        flatNo:
          type: string
        parkingNo:
          type: string
        flatId:
          type: integer
          format: int64
        societyId:
          type: integer
          format: int64
    FeedbackDto:
      type: object
      properties:
        content:
          type: string
    Feedback:
      type: object
      properties:
        feedbackId:
          type: integer
          format: int64
        content:
          type: string
        eventId:
          type: integer
          format: int64
    FeedbackResponse:
      type: object
      properties:
        feedback:
          $ref: '#/components/schemas/Feedback'
        message:
          type: string
    Payment:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
        flatNo:
          type: string
        amount:
          type: integer
          format: int64
        paymentDate:
          type: string
          format: date-time
        status:
          type: string
        razorpayId:
          type: string
        societyId:
          type: integer
          format: int64